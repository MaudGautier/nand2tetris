// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // ------------------------------------ Read instructions ------------------------------------

    // Decode op-code
    Not(in=instruction[15], out=isInstructionA);                    // op-code A
    Not(in=isInstructionA, out=isInstructionC);                     // op-code C

    // Decode Destination
    Or(a=isInstructionA, b=instruction[5], out=loadRegisterA);      // d1
    And(a=isInstructionC, b=instruction[4], out=loadRegisterD);     // d2
    And(a=isInstructionC, b=instruction[3], out=writeM);            // d3

    // Decode Computation bit "a" for instruction C
    And(a=isInstructionC, b=instruction[12], out=selectRegisterM);  // a

    // Decode Computation bits for instruction C
    And(a=isInstructionC, b=instruction[11], out=c1);               // c1
    And(a=isInstructionC, b=instruction[10], out=c2);               // c2
    And(a=isInstructionC, b=instruction[9], out=c3);                // c3
    And(a=isInstructionC, b=instruction[8], out=c4);                // c4
    And(a=isInstructionC, b=instruction[7], out=c5);                // c5
    And(a=isInstructionC, b=instruction[6], out=c6);                // c6

    // Decode Jump bits for instruction C
    And(a=isInstructionC, b=instruction[2], out=jumpIfStrictNeg);   // j1
    And(a=isInstructionC, b=instruction[1], out=jumpIfZero);        // j2
    And(a=isInstructionC, b=instruction[0], out=jumpIfStrictPos);   // j3


    // ------------------------------------ Implement chips ------------------------------------

    // First Mux
    Mux16(a=outALU, b=instruction, sel=isInstructionA, out=outMux1);

    // The A register
    ARegister(in=outMux1, load=loadRegisterA, out=outRegisterA, out[0..14]=addressM);

    // Second Mux
    Mux16(a=outRegisterA, b=inM, sel=selectRegisterM, out=outMux2);

    // The D register
    DRegister(in=outALU, load=loadRegisterD, out=outRegisterD);

    // ALU
    ALU(x=outRegisterD, y=outMux2, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outALU, out=outM, zr=zr, ng=ng);

    // ------------------------------------ Implement PC ------------------------------------

    // Decode ALU out
    And(a=true, b=zr, out=outEqualsZero);
    Not(in=outEqualsZero, out=outNotZero);
    And(a=outNotZero, b=ng, out=outIsStrictlyNegative);
    Or(a=outEqualsZero, b=outIsStrictlyNegative, out=outIsNegative);
    Not(in=outIsNegative, out=outIsStrictlyPositive);

    // Jump decision
    And(a=jumpIfStrictNeg, b=outIsStrictlyNegative, out=jumpCase1);
    And(a=jumpIfZero, b=outEqualsZero, out=jumpCase2);
    And(a=jumpIfStrictPos, b=outIsStrictlyPositive, out=jumpCase3);
    Or(a=jumpCase1, b=jumpCase2, out=jumpCase1or2);
    Or(a=jumpCase3, b=jumpCase1or2, out=jump);
    Not(in=jump, out=noJump);

    // The PC
    PC(in=outRegisterA, load=jump, inc=noJump, reset=reset, out[0..14]=pc);
}